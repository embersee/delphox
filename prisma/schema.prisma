// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id            String    @id
  username      String    @unique
  name          String?
  displayName   String?
  email         String?
  emailVerified DateTime?
  image         String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Bot Bot[]
}

model Bot {
  id               String  @id @default(cuid())
  userId           String
  username         String  @db.VarChar(32)
  displayName      String  @default("")
  botToken         String  @db.VarChar(50)
  active           Boolean @default(false)
  description      String  @default("") @db.VarChar(512)
  shortDescription String  @default("") @db.VarChar(120)
  menuButton       String  @default("")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Command Command[]

  Customer   Customer[]
  Order      Order[]
  Products   Product[]
  Categories Category[]

  @@index([userId])
}

model Command {
  id      String @id @default(cuid())
  command String @db.VarChar(32)
  content String @db.VarChar(4096)

  Bot   Bot    @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId String

  @@index([botId])
}

model Product {
  id               String         @id @default(cuid())
  name             String
  description      String
  shortDescription String
  price            Int
  discount         Int?
  stock            Int
  status           ProductStatus? @default(INACTIVE)
  priority         Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Categories Category[]
  Images     Image[]
  Bot        Bot?       @relation(fields: [botId], references: [id])
  botId      String?
  Cart       Cart?      @relation(fields: [cartId], references: [id])
  cartId     String?

  @@index([botId])
  @@index([cartId])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model Category {
  id   String @id @default(cuid())
  name String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  Bot       Bot?     @relation(fields: [botId], references: [id])
  botId     String?

  @@index([productId])
  @@index([botId])
}

model Image {
  id       String  @id @default(cuid())
  url      String
  priority String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  @@index([productId])
}

model Cart {
  id String @id @default(cuid())

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Customer           Customer @relation(fields: [customerTelegramId], references: [telegramId])
  customerTelegramId String   @unique

  ProductsInCart Product[]

  OrderCart Order?

  @@index([customerTelegramId])
}

model Customer {
  telegramId  String  @id @unique
  username    String? @default("")
  name        String? @default("")
  Cart        Cart?
  BotCustomer Bot[]
}

model Order {
  id          String  @id @default(cuid())
  comment     String?
  address     String?
  email       String?
  phonenumber String?
  totalSum    Int

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  orderStatus   OrderStatus   @default(CREATED)
  paymentType   PaymentType   @default(TELEGRAM)
  paymentStatus PaymentStatus @default(INCOMPLETE)

  Cart Cart @relation(fields: [cartId], references: [id])
  Bot  Bot  @relation(fields: [botId], references: [id])

  cartId String @unique
  botId  String

  @@index([botId])
  @@index([cartId])
}

enum OrderStatus {
  CREATED
  FAILED
  CANCELLED
  SUCCESSFUL
  DELIVERY
  COMPLETE
}

enum PaymentType {
  TELEGRAM
  SUPPORT
  IRL
}

enum PaymentStatus {
  INCOMPLETE
  FAILED
  COMPLETE
  REFUNDED
}
